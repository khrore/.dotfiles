// LazyVim-style keymap for Zed Editor with Yazi-inspired Project Panel
// For information on binding keys, see: https://zed.dev/docs/key-bindings
// To see the default key bindings run `zed: open default keymap`
//
[
  // Global Vim normal mode: buffer navigation, window management, pane navigation, panel toggles
  {
    "context": "VimControl && vim_mode == normal",
    "bindings": {
      "shift-h": "pane::ActivatePreviousItem",
      "shift-l": "pane::ActivateNextItem",
      "[ b": "pane::ActivatePreviousItem",
      "] b": "pane::ActivateNextItem",
      "ctrl-w o": "pane::JoinAll",
      "ctrl-w ctrl-o": "pane::JoinAll",
      "ctrl-w f": "workspace::ActivatePreviousPane",
      "ctrl-w ctrl-f": "workspace::ActivatePreviousPane",
      "ctrl-w b": "pane::CloseOtherItems",
      "ctrl-w ctrl-b": "pane::CloseOtherItems",
      "ctrl-w l": "pane::SplitAndMoveRight",
      "ctrl-w h": "pane::SplitAndMoveLeft",
      "ctrl-w j": "pane::SplitAndMoveDown",
      "ctrl-w k": "pane::SplitAndMoveUp",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-k": "workspace::ActivatePaneUp",
      "space space": "file_finder::Toggle",
      "space /": "pane::DeploySearch",
      "space o": "workspace::CloseAllDocks",
      "space f n": "workspace::NewFile",
      "space w m": "diagnostics::Deploy",
      "space w e": "project_panel::ToggleFocus",
      "space w b": "outline_panel::ToggleFocus",
      "space w g": "git_panel::ToggleFocus",
      "space w d": "debug_panel::ToggleFocus",
      "space w a": "agent::ToggleFocus",
      "space w n": "notification_panel::ToggleFocus",
      "space w c": "collab_panel::ToggleFocus",
      "space w t": "terminal_panel::ToggleFocus"
    }
  },
  // Dock/panel specific: close dock or return focus to editor
  {
    "context": "Dock > (VimControl && vim_mode == normal)",
    "bindings": {
      "q": "workspace::CloseActiveDock",
      "shift-q": "editor::ToggleFocus"
    }
  },
  // Editor specific: code actions, LSP navigation, formatting, git integration
  {
    "context": "Editor && (VimControl && vim_mode == normal)",
    "bindings": {
      "space a": "editor::ToggleCodeActions",
      "space f": "editor::Format",
      "space r": "editor::Rename",
      "space d": "editor::GoToDefinition",
      "space shift-d": "editor::GoToTypeDefinition",
      "space l": "editor::FindAllReferences",
      "space i": "editor::GoToImplementation",
      "shift-k": "editor::Hover",
      "space j": "editor::GoToDiagnostic",
      "space s": "diagnostics::Deploy",
      "space shift-s": "project_symbols::Toggle",
      "space c c": "editor::ToggleComments",
      "alt-j": "editor::MoveLineDown",
      "alt-k": "editor::MoveLineUp",
      "space b": "git::Blame",
      "space h": "editor::ToggleSelectedDiffHunks"
    }
  },
  // AI agent diff view: accept/reject suggestions
  {
    "context": "Editor && editor_agent_diff",
    "bindings": {
      "space y": "agent::Keep",
      "space n": "agent::Reject",
      "space shift-y": "agent::KeepAll",
      "space shift-n": "agent::RejectAll",
      "space shift-r": "agent::OpenAgentDiff"
    }
  },
  // AI agent message editor: thread management, settings, permissions
  {
    "context": "MessageEditor > (VimControl && vim_mode == normal)",
    "bindings": {
      "space t": "agent::ToggleNewThreadMenu",
      "space ,": "agent::OpenSettings",
      "space l": "agent::OpenRulesLibrary",
      "space s": "agent::ToggleProfileSelector",
      "space f": "agent::Follow",
      "space m n": "agent::ToggleNavigationMenu",
      "space m o": "agent::ToggleOptionsMenu",
      "space r m": "agent::RemoveAllContext",
      "space enter": "agent::ContinueThread",
      "space b": "agent::ToggleBurnMode",
      "space shift-b": "agent::ContinueWithBurnMode",
      "space y": "agent::AllowOnce",
      "space shift-y": "agent::AllowAlways",
      "space n": "agent::RejectOnce"
    }
  },
  // Picker and menu navigation: Vim-style j/k movement
  {
    "context": "Picker || menu",
    "use_key_equivalents": true,
    "bindings": {
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious"
    }
  },
  // Agent panel navigation menu: Vim-style j/k movement
  {
    "context": "AgentPanel > NavigationMenu",
    "use_key_equivalents": true,
    "bindings": {
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious"
    }
  },
  // Project panel: Yazi-style file operations (copy, paste, delete, rename, etc.)
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "q": "workspace::CloseActiveDock",
      "y": "project_panel::Copy",
      "x": "project_panel::Cut",
      "p": "project_panel::Paste",
      "d": "project_panel::Delete",
      "a": "project_panel::NewFile",
      "shift-a": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "enter": "project_panel::Open",
      "o": "project_panel::Open",
      "g r": "project_panel::RevealInFileManager",
      "c c": "workspace::CopyPath",
      "c r": "workspace::CopyRelativePath",
      "shift-j": "menu::SelectNext",
      "shift-k": "menu::SelectPrevious"
    }
  },
  // Terminal: page scrolling with ctrl-u/d
  {
    "context": "Terminal",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-u": "terminal::ScrollPageUp",
      "ctrl-d": "terminal::ScrollPageDown"
    }
  }
]
